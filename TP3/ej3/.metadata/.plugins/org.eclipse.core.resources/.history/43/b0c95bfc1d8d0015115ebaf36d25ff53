public class Main 
{
	public static void main(String[] args) throws Exception 
	{	
		//Escritor archivoDeTiempos = new Escritor("resultadosDeTiempos.out");
		//Escritor archivoDeConflictos = new Escritor("resultadosDeConflictos.out");
		
		int cantDeNodos = 7;
		int escala = 1;
		int cantMaximaDeNodos = 99;
		//int cantIteraciones = 5;
		
		while (cantDeNodos < cantMaximaDeNodos)
		{
			Escritor archivoDeTiempos = new Escritor("resultadosDeTiempos.out");
			Escritor archivoDeConflictos = new Escritor("resultadosDeConflictos.out");
			
			GeneradorCasosDeTestsByNodos generador = new GeneradorCasosDeTestsByNodos();
			String nombreArchivo = generador.GenerarGrafoByCantNodos(cantDeNodos);
		
			Grafo grafo = new Grafo();
			//int index = 0;
			long elapsed = 0;
			
			//while(index < cantIteraciones)
			//{
				Lector lector = new Lector(nombreArchivo);	
				long time0 = System.nanoTime();
				Grafo grafoResultante = lector.MakeGraph();
				grafoResultante.MakeRainbow();
				
				long time1 = System.nanoTime();
				
				elapsed += (time1-time0);
				grafo = grafoResultante;
				//index ++;
			//}

			
			archivoDeTiempos.EscribirLinea(String.valueOf(cantDeNodos) + " " + String.valueOf(elapsed)+ "\n");
			archivoDeTiempos.Fin();
			int cantidadDeConflictos = CalcularConflictos(grafo);
			archivoDeConflictos.EscribirLinea(String.valueOf(cantDeNodos) + " " + String.valueOf(cantidadDeConflictos)+ "\n");
			archivoDeConflictos.Fin();
			cantDeNodos += escala;
		}
		
		//archivoDeTiempos.Fin();
		//archivoDeConflictos.Fin();
		
		System.out.println("Proceso finalizado");
	}

	private static int CalcularConflictos(Grafo grafo) 
	{
		int conflictos = 0;
		for ( Nodo nodo : grafo.getNodos() )
			conflictos += CantidadDeVecinosDeMiColor(grafo, nodo);
			
		return conflictos/2;
			
	}

	private static int CantidadDeVecinosDeMiColor(Grafo grafo, Nodo nodoActual) 
	{
		int cantidadDeVecinosCopiones = 0;
		for (Nodo nodoVecino : grafo.getVecinosDe(nodoActual))
		{
			if (nodoVecino.getColor() == nodoActual.getColor())
				cantidadDeVecinosCopiones++;
		}
		return cantidadDeVecinosCopiones;
			
	}
}
