import java.io.File;
import java.io.IOException;
import java.util.HashSet;
import java.util.Random;
import java.util.Set;

public class GeneradorCasosDeTestsByNodos
{
	
	private int cantNodos;
	private int cantAristas;
	private int cantColores;
	private Random numeros = new Random();
	private int cantTotalColores;

	GeneradorCasosDeTestsByNodos(int cantDeNodos) throws Exception
	{
		
		this.cantNodos        = cantDeNodos;
		this.cantAristas      = cantDeNodos*(cantDeNodos-1)/4;
		this.cantTotalColores = cantDeNodos + 100; 
		
		GenerarCasoValidoConCantDeNodos();
	}

	private void GenerarCasoValidoConCantDeNodos() throws IOException, Exception 
	{
		CrearArchivoDeGrafo();

		while (!TieneSolucionElGrafo(String.valueOf(cantNodos) + "Nodos.out"))
		{
			CrearArchivoDeGrafo();
		}
	}

	private void CrearArchivoDeGrafo() throws Exception 
	{
		
		Escritor escritor = new Escritor(String.valueOf(cantNodos) + "Nodos.out");
		escritor.EscribirString(String.valueOf(cantNodos) + " " + String.valueOf(cantAristas) + " " + String.valueOf(cantColores) + "\n");
		
		Set<Nodo> nodos = new HashSet<Nodo>();
		for (int i = 0; i < cantNodos; i++)
		{
			escritor.PrintNode(cantTotalColores);
		}
		
		public Nodo(int j, int cantidadDeColoresDelGrafo, int[] colores)  {
			//int cantidadDeColoresPosibles = Integer.valueOf(linea[0]);
			this.setColores(colores, cantidadDeColoresDelGrafo);
			this.setId(j);
			this.setColor(-1);
			this.setVisitado(false);
		}
		
		Set<Arista> aristas = new HashSet<Arista>();
		while (aristas.size() < cantPortales)
		{
			Arista arista = new Arista(cantidadDePisos, longitudDePasillos);
			aristas.add(arista);
		}
		
        for (Arista a: aristas) 
		{
			escritor.escribirArista(a);
		}

		escritor.Fin();	
	}

	private boolean TieneSolucionElGrafo(String archivoGrafo) throws Exception 
	{
		
		String path = getClass().getResource( "" ).getPath();
		File archivo = new File( path + archivoGrafo);
	    if (!archivo.exists())
	    {
			System.out.print("No existe el archivo que se quiere verificar");
	    	return false;
	    }
	    
		Lector recuperar_nodos = new Lector(archivoGrafo);
		recuperar_nodos.procesar_entrada();
		Solucion sol = new Solucion(recuperar_nodos.primer_nodo(),recuperar_nodos.ultimo_nodo());
		int solucion = sol.calcular_segundos();
		if (solucion != 0)
			return true;
		else
			return false;
	}
	    	
}
