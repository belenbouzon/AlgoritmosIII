import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;

public class Lector {
	
	private BufferedReader archivo;
	private String path;
	
	public Lector(String archivo) throws Exception
	{
		this.archivo = new BufferedReader( new InputStreamReader( getClass().getResourceAsStream(archivo)));
		this.path = getClass().getResource( "" ).getPath();
	}
	
	public Grafo MakeGraph() 
	{

		Grafo grafo = new Grafo();
		int[] nodosAristasColores = ToIntegerArray(this.archivo.readLine().split(" "));

		grafo.setCantidadDeNodos(nodosAristasColores[0]);
		grafo.setCantidadDeAristas(nodosAristasColores[1]);
		grafo.setCantidadDeColores(nodosAristasColores[2]);
		
		grafo.setNodos(this.ObtenerListaDeNodos(grafo.getCantidadDeNodos()));
		
		grafo.setMatrizDeAdyacencia(this.GenerarMatrizDeAdyacencia());

		return grafo;
	}
		
	private ArrayList<Nodo> ObtenerListaDeNodos(int cantidadDeNodos) throws IOException 
	{
		ArrayList<Nodo> res = new ArrayList<Nodo>();
		
		for(int j = 0; j < cantidadDeNodos; j++)
		{
			String[] linea = this.archivo.readLine().split(" ");
			Nodo nodo = new Nodo();
			nodo.setCantidadDeColoresPosibles(Integer.valueOf(linea[0]));
			nodo.setColoresPosibles(ToIntegerArray(Arrays.copyOfRange(linea, 1, linea.length)));
			nodo.setId(j);
			nodo.setColor(-1);
			//nodo.setPadre(-1);
			nodo.setVisitado(false);
		}
		return null;
	}

	private int[] ToIntegerArray(String[] split) 
	{
		int[] res = new int[split.length];
		for (int i = 0; i < split.length; i ++)
			res[i] = Integer.parseInt(split[i]);
		return res;
	}



}
