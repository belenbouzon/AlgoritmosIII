import java.util.LinkedList;

public abstract class Coloring 
{
	//public abstract Nodo PicFirstNode(); //lo hago abstracto, asi despues cada uno lo implementa distinto
	
	private int cantidadDeConflictos = 0;
	private int nodosPintados = 0;
	
	public static void MakeRainbow(Grafo grafo) 
	{
		//Setear en no visitado cada uno de los nodos
		
		Nodo nodo = PicFirstNode();
		
		LinkedList<Integer> coloresRestantes = nodo.getColoresRestantes();
		
		if(coloresRestantes.size() == 1)
		{
			nodo.setColor(coloresRestantes.getFirst());
			nodosPintados ++;
		}
		else
		{
			int colorMenosImportante = CalcularColorMenosImportante(nodo); //otra abstracta. A decidir como implementarla
			nodo.TacharColor(colorMenosImportante);
		}

		nodo.setVisitado(true);
		/*
		 * tomo un nodo
		 * colores = sus colores
		 * if (colores.count == 1)
		 * {
		 *  nodos pintados ++;
		 * 	nodo.color = color[0]
		 * }
		 * else
		 * 	colorMenosImportante = CalcularColorDeMenorPeso(nodo)
		 * 	nodo.tacharColor(colorMenosImportante)
		 * 
		 * 
		 * para cada color, recorro todos sus vecinos*/
		
	}
	

}
